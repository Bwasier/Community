package fr.solucom.community;

import android.app.ActionBar;
import android.app.Activity;
import android.app.Fragment;
import android.app.FragmentManager;
import android.app.FragmentTransaction;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.support.v4.widget.DrawerLayout;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.Toast;

import com.google.gson.Gson;

import org.json.JSONObject;

import fr.solucom.communitylibrary.ConnectionsChecker;
import fr.solucom.communitylibrary.DataUpdator;
import fr.solucom.communitylibrary.GeneralData;
import fr.solucom.communitylibrary.Home;

/**
 * Main activity for the comm'unity application. This activity is launched by clicking on the notification
 * generated by the Estimote Manager
 * This activity implements all fragments used for the project
 *
 * @see EstimoteManager
 * @see DetailEventFragment
 * @see DetailNewsFragment
 * @see EventsFragment
 * @see SetMenuFragment
 * @see KnowledgeManagementFragment
 * @see NavigationDrawerFragment
 * @see NewsFragment
 * @see SolucomFragment
 */

public class MainActivity extends Activity
        implements
        //implements all fragments used in the app
        DetailEventFragment.OnFragmentInteractionListener,
        DetailNewsFragment.OnFragmentInteractionListener,
        EventsFragment.OnFragmentInteractionListener,
        SetMenuFragment.OnFragmentInteractionListener,
        KnowledgeManagementFragment.OnFragmentInteractionListener,
        NavigationDrawerFragment.NavigationDrawerCallbacks,
        NewsFragment.OnFragmentInteractionListener,
        SolucomFragment.OnFragmentInteractionListener

{

    // TAG used for the debug mode
    private static final String TAG = "MainActivity";
    //Beacon UUID the UUID caugth by the service Estimote Manager)
    public String UUIDbeacon = null;
    //Default beacon major
    public int major = 0;
    //Default beacon minor
    public int minor = 0;
    //Default message for floor
    String url = null;
    Home home = null;
    GeneralData generalData = null;
    //Fragment managing the behaviors, interactions and presentation of the navigation drawer.
    private NavigationDrawerFragment mNavigationDrawerFragment;

    /**
     * CharSequence used to store the last screen title.
     */
    private CharSequence mTitle;

    /**
     * Method called when the activity is created.
     *
     * @param savedInstanceState Instance that contains all parameters caught by the Estimote Manager
     * @see EstimoteManager
     * @see fr.solucom.communitylibrary.ConnectionsChecker
     */
    @Override
    protected void onCreate(Bundle savedInstanceState) {

        super.onCreate(savedInstanceState);
        // get the server url in the string resources
        url = getString(R.string.Server_URL);
        // used to check if the bluetooth is one
        ConnectionsChecker.checkBluetoothAdapter(this);
        //used to check if the internet connection is active
        ConnectionsChecker.checkInternetAccess(this);

        if (savedInstanceState == null) {

            //Used to get arguments caught by the service
            Bundle extras = getIntent().getExtras();

            if (extras == null) {

                Log.d(TAG, "extras not found (null)");

                //If extras is null, the application has been launched manually.
                // Informs the user that the application will be launched automatically then closes the activity
                Toast.makeText(getApplicationContext(), "Une notification vous sera envoyée à la réception du signal d'une balise.",
                        Toast.LENGTH_LONG).show();
                //closes the current activity
                this.finish();
            } else {

                //Catches values from the service Estimote Manager.
                // UUID of the beacon detected, major and minor
                UUIDbeacon = extras.getString("UUID");
                major = extras.getInt("major");
                minor = extras.getInt("minor");
            }
        }
        // Check if parameters are correct
        if (UUIDbeacon != null && major != 0 && minor != 0) {
            //Logs the beacon detected
            Log.d(TAG, "collectData called with : UUID :" + UUIDbeacon + " major: " + major + " minor: " + minor);

            //Uses the DataCollector collectGeneralData method with parameters caught. {@link #collectGeneralData()}.
            DataCollector.collectGeneralData(url, this);

        }
        // select the appropriate view for main activity
        setContentView(R.layout.activity_main);
        //select the appropriate navigation drawer
        mNavigationDrawerFragment = (NavigationDrawerFragment)
                getFragmentManager().findFragmentById(R.id.navigation_drawer);
    }

    /**
     * Method called when the user clicks on the navigation drawer.
     * The activity implements two fragments (top and bottom of the screen) with information received by the server
     *
     * @param position The position (i.e the topic (home, news, events..) selected by the user
     */

    @Override
    public void onNavigationDrawerItemSelected(int position) {
        //Activity uses two fragments. First, fragments should be initialized
        Fragment fragment1 = null;
        Fragment fragment2 = null;

        //get the fragment manager
        FragmentManager fragmentManager = getFragmentManager();
        //get the fragment transaction from the fragment manager
        FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();

        //According to the item selected by the user (position), different fragments are implemented
        if (home != null && generalData != null) {
            switch (position) {

                // default is the home so call the NewsFragment and the EventsFragment to display information on home page
                default:
                    fragment1 = NewsFragment.newInstance(home);
                    fragment2 = EventsFragment.newInstance(home);
                    //uses mTitle to update the title of the page
                    mTitle = home.getTitle();
                    break;

                // News selected
                case 1:
                    fragment1 = DetailNewsFragment.newInstance(home.getNews1());
                    fragment2 = DetailNewsFragment.newInstance(home.getNews2());
                    mTitle = home.getNewsTitle();
                    break;

                // Events selected
                case 2:
                    fragment1 = DetailEventFragment.newInstance(home.getEvent1());
                    fragment2 = DetailEventFragment.newInstance(home.getEvent2());
                    //uses mTitle to update the title of the page
                    mTitle = home.getEventsTitle();
                    break;

                //  KM selected
                case 3:
                    fragment1 = KnowledgeManagementFragment.newInstance(generalData.getKmArticle1());
                    fragment2 = KnowledgeManagementFragment.newInstance(generalData.getKmArticle2());
                    //uses mTitle to update the title of the page
                    mTitle = generalData.getKMTitle();
                    break;

                // Restaurants menus selected
                case 4:
                    fragment1 = SetMenuFragment.newInstance(generalData.getSetMenu1());
                    fragment2 = SetMenuFragment.newInstance(generalData.getSetMenu2());
                    //uses mTitle to update the title of the page
                    mTitle = generalData.getSetMenuTitle();
                    break;

                // Solucom page selected
                case 5:
                    fragment1 = SolucomFragment.newInstance(generalData.getSolucomArticle1());
                    fragment2 = SolucomFragment.newInstance(generalData.getSolucomArticle2());
                    //uses mTitle to update the title of the page
                    mTitle = generalData.getSolucomTitle();
                    break;
            }

            //When fragments are implemented, call the fragmentTransaction of the fragmentManager
            // update the content of frags then commit
            fragmentTransaction.replace(R.id.container1, fragment1);
            fragmentTransaction.replace(R.id.container2, fragment2);
            // update the content of frags then commit
            fragmentTransaction.commit();
            //if the data are not yet received, launches again the method
        }

    }


    /**
     * Method called to restore the action bar
     *
     * @see MainActivity#updateData(JSONObject, String)
     */
    public void restoreActionBar() {
        //get the action bar
        ActionBar actionBar = getActionBar();
        //enables to diplay the title
        actionBar.setDisplayShowTitleEnabled(true);
        //update the title
        actionBar.setTitle(mTitle);
    }

    /**
     *
     * @param menu
     * @return
     */
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {

        if (mNavigationDrawerFragment != null) {

            if (!mNavigationDrawerFragment.isDrawerOpen()) {
                // Only show items in the action bar relevant to this screen
                // if the drawer is not showing. Otherwise, let the drawer
                // decide what to show in the action bar.
                getMenuInflater().inflate(R.menu.main, menu);
                restoreActionBar();
                return true;
            }
        }

        return super.onCreateOptionsMenu(menu);
    }

    /**
     *
     * @param item
     * @return
     */
    @Override
    public boolean onOptionsItemSelected(MenuItem item) {

        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            Intent intent = new Intent(this, SettingsActivity.class);
            startActivity(intent);
        }

        return super.onOptionsItemSelected(item);
    }

    /**
     *
     * @param uri
     */
    public void onFragmentInteraction(Uri uri) {
        //leave it empty
    }

    /**
     * Method used to catch the server response for a specific beacon (i.e. for a specific floor)
     * When the response is received, the home of this activity should be updated
     *
     *
     * @param JsonObject JsonObject that represents the "home" sent by the server
     * @param page the page required by the user (e.g Home, KM store, Restaurant)
     * @see DataCollector
     * @see Gson
     */
    public void updateData(JSONObject JsonObject, String page) {

        // Set up the drawer.
        mNavigationDrawerFragment.setUp(R.id.navigation_drawer, (DrawerLayout) findViewById(R.id.drawer_layout));
        this.home = DataUpdator.updateData(JsonObject);
        mTitle = home.getTitle();
        onNavigationDrawerItemSelected(0);
        restoreActionBar();
    }

    /**
     * Method used to catch the server response for general data (i.e. Common data for all floors
     * When the response is received, generalData of the activity should be updated
     *
     *
     * @param JsonObject A JSON object sent by the server
     * @see DataCollector
     * @see Gson
     */
    public void updateGeneralData(JSONObject JsonObject) {
        this.generalData = DataUpdator.updateGeneralData(JsonObject);
        //Uses the DataCollector collectHomeData method with parameters caught. {@link #collectHomeData()}.
        DataCollector.collectHomeData(url, UUIDbeacon, major, minor, "home", this);
    }

}

